{"version":3,"sources":["components/Chart/Chart.js","components/ChartList/ChartList.js","components/App/App.js","serviceWorker.js","index.js"],"names":["LineChart","props","socket","io","autoConnect","path","state","isConnected","min","vol","last","max","var","handleUpdate","bind","handleMovements","on","chartRef","React","createRef","data","this","name","ticker","setState","volume","labels","push","Date","time","datasets","value","options","scales","yAxes","ticks","update","oldProps","connect","disconnect","Chart","current","type","xAxes","unit","gridLines","display","drawBorder","fill","backgroundColor","pointRadius","borderColor","borderWidth","lineTension","Container","fluid","style","padding","Row","alignItems","Col","sm","ref","hidden","ListGroup","horizontal","width","Item","action","variant","Component","ChartList","handleStocks","emit","stockCharts","map","stock","key","Home","handleConnect","Navbar","bg","sticky","Nav","className","Button","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.010679f0.chunk.js","sourcesContent":["import React from 'react';\nimport './Chart.css';\nimport { ListGroup, Container, Row, Col } from 'react-bootstrap';\nimport Chart from \"chart.js\";\nimport io from \"socket.io-client\";\n\n\nclass LineChart extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const socket = io('wss://​le-18262636.bitzonte.com',{\n      autoConnect: false,\n      path: '/stocks',\n    });\n\n    this.state = {isConnected: props.isConnected, min: 0, vol: 0, last: null, max: null, var: null}\n    this.socket = socket\n    this.handleUpdate = this.handleUpdate.bind(this);\n    this.handleMovements = this.handleMovements.bind(this);\n    this.socket.on('BUY', this.handleMovements);\n    this.socket.on('SELL', this.handleMovements);\n    this.socket.on('UPDATE', this.handleUpdate);\n    this.chartRef = React.createRef();\n  }\n\n  handleMovements(data) {\n    if (this.props.isConnected && this.props.name === data.ticker){\n      this.setState(state => ({\n        vol: state.vol + data.volume,\n      }))\n    }\n  }\n\n  handleUpdate(data) {\n    if (this.props.isConnected && this.props.name === data.ticker){\n\n      this.LineChart.data.labels.push(new Date(data.time));\n      this.LineChart.data.datasets[0].data.push(data.value)\n      this.setState({\n        last: data.value\n      })\n\n      if (data.value < this.state.min || this.state.min === 0){\n        this.setState({\n          min: data.value,\n          var: this.state.last / data.value\n        })\n        this.LineChart.options.scales.yAxes[0].ticks.min = data.value - 5\n      }\n\n      if (data.value > this.state.max){\n        this.setState({\n          max: data.value\n        })\n      }\n\n      this.LineChart.update();\n    }\n  }\n\n  componentDidUpdate(oldProps) {\n    const newProps = this.props\n\n    if(newProps.isConnected) {\n      this.socket.connect()\n    }\n    else {\n      this.socket.disconnect()\n    }\n  }\n\n  componentDidMount() {\n    this.LineChart = new Chart(this.chartRef.current, {\n      type: 'line',\n      options: {\n        scales: {\n          xAxes: [\n            {\n              type: 'time',\n              time: {\n                unit: 'minute'\n              },\n            }\n          ],\n          yAxes: [\n            {\n              ticks: {\n                min: this.state.min\n              },\n              gridLines: {\n                display: false,\n                drawBorder: true\n            }\n            }\n          ]\n        }\n      },\n      data: {\n        labels: [],\n        datasets: [{\n          data: [],\n          fill: 'none',\n          backgroundColor: 'blue',\n          pointRadius: 2,\n          borderColor: 'blue',\n          borderWidth: 1,\n          lineTension: 0\n        }]\n      }\n    });\n  }\n\n    render(){\n      return (\n      <div>\n        <br></br>\n        <Container fluid style={{ padding:'2%'}}>\n            <Row style={{ alignItems:'center' }}>\n              <Col sm={8} style={{ alignItems:'center' }}>\n                {this.props.isConnected &&\n                  <h1>{this.props.name}</h1>\n                }\n\n                <canvas ref={this.chartRef} hidden={!this.props.isConnected}/>\n              </Col>\n              <Col sm={4} style={{ alignItems:'center' }}>\n\n                <ListGroup horizontal style={{ width: '10rem', padding:'2%'}} hidden={!this.props.isConnected}>\n                  <ListGroup.Item action variant=\"dark\" style={{ width: '150px'}}><b>Precio Máximo</b></ListGroup.Item>\n                  <ListGroup.Item style={{ width: '100px'}}>{this.state.max}</ListGroup.Item>\n                </ListGroup>\n\n\n                <ListGroup horizontal style={{ width: '10rem', padding:'2%' }} hidden={!this.props.isConnected}>\n                  <ListGroup.Item action variant=\"dark\" style={{ width: '150px'}}><b>Precio Mínimo</b></ListGroup.Item>\n                  <ListGroup.Item style={{ width: '100px'}}>{this.state.min}</ListGroup.Item>\n                </ListGroup>\n\n\n               <ListGroup horizontal style={{ width: '10rem', padding:'2%' }} hidden={!this.props.isConnected}>\n                  <ListGroup.Item action variant=\"dark\" style={{ width: '150px'}}><b>Último Precio</b></ListGroup.Item>\n                  <ListGroup.Item style={{ width: '100px'}}>{this.state.last}</ListGroup.Item>\n                </ListGroup>\n\n\n               <ListGroup horizontal style={{ width: '10rem', padding:'2%' }} hidden={!this.props.isConnected}>\n                  <ListGroup.Item action variant=\"dark\" style={{ width: '150px'}}><b>Volumen Transado</b></ListGroup.Item>\n                  <ListGroup.Item style={{ width: '100px'}}>{this.state.vol}</ListGroup.Item>\n                </ListGroup>\n\n                <ListGroup horizontal style={{ width: '10rem', padding:'2%' }} hidden={!this.props.isConnected}>\n                   <ListGroup.Item action variant=\"dark\" style={{ width: '150px'}}><b>Variación Porcentual</b></ListGroup.Item>\n                   <ListGroup.Item style={{ width: '100px'}}>{this.state.var}%</ListGroup.Item>\n                 </ListGroup>\n\n              </Col>\n            </Row>\n          </Container>\n      </div>\n\n      )\n    };\n}\n\nexport default LineChart;\n","import React from 'react';\nimport './ChartList.css';\nimport { Container } from 'react-bootstrap';\nimport LineChart from '../Chart/Chart'\nimport io from \"socket.io-client\";\n\nclass ChartList extends React.Component {\n\n  constructor(props){\n    super(props);\n\n    const socket = io('wss://​le-18262636.bitzonte.com',{\n      autoConnect: false,\n      path: '/stocks',\n    });\n\n    this.state = {'stockCharts':[], 'isConnected': props.isConnected}\n    this.socket = socket\n    this.socket.connect()\n    this.handleStocks = this.handleStocks.bind(this)\n    this.socket.on('STOCKS', this.handleStocks);\n    this.socket.emit('STOCKS');\n  }\n\n  handleStocks(data) {\n    this.setState({\n      'stockCharts': data\n    })\n  }\n\n  componentDidUpdate(oldProps) {\n\n    const newProps = this.props\n\n    if(!newProps.isConnected) {\n      this.socket.disconnect()\n    }\n\n  }\n\n  render(){\n\n    return (\n          <div>\n            <Container fluid>\n              <ul>\n                {this.state.stockCharts.map((stock) =>\n                                              <LineChart key={stock.ticker}\n                                              name={stock.ticker}\n                                              isConnected={this.props.isConnected} />)}\n              </ul>\n            </Container>\n          </div>);\n\n  };\n\n}\n\nexport default ChartList;\n","import './App.css';\nimport React from \"react\";\nimport io from \"socket.io-client\";\n\nimport { Container, Button, Navbar, Nav } from 'react-bootstrap';\nimport ChartList from '../ChartList/ChartList'\n\nclass Home extends React.Component {\n\n  constructor(props){\n    super(props);\n\n    const socket = io('wss://​le-18262636.bitzonte.com',{\n      autoConnect: false,\n      path: '/stocks',\n    });\n\n    this.state = {isConnected: false}\n    this.socket = socket\n    this.handleConnect = this.handleConnect.bind(this);\n  }\n\n  handleConnect() {\n\n    this.setState(state => ({\n      isConnected: !state.isConnected\n    }))\n\n  }\n\n  render(){\n    return (\n      <div>\n\n        <Navbar bg=\"dark\" variant=\"dark\" sticky='top'>\n          <Nav.Item className=\"ml-auto\">\n            <Button variant=\"dark\" onClick={this.handleConnect}>\n                {this.state.isConnected ? 'Desconectar' : 'Conectar'}\n            </Button>\n          </Nav.Item>\n        </Navbar>\n\n        <Container fluid>\n          <ChartList isConnected={this.state.isConnected} />\n        </Container>        \n\n      </div>);\n  };\n\n}\n\nexport default Home;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Home from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<Home />,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}